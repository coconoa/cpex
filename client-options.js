window.compilerExplorerOptions = {"googleAnalyticsAccount":"UA-55180-6","googleAnalyticsEnabled":false,"sharingEnabled":true,"githubEnabled":true,"showSponsors":false,"gapiKey":"","googleShortLinkRewrite":["^https?://goo.gl/(.*)$","https://godbolt.org/g/$1"],"urlShortenService":"default","defaultSource":"builtin","compilers":[{"id":"/usr/bin/ruby","name":"/usr/bin/ruby","alias":[],"options":"","objdumperType":"default","intelAsm":"","instructionSet":"amd64","needsMulti":true,"supportsDemangle":false,"supportsBinary":false,"interpreted":true,"supportsExecute":true,"executionWrapper":"","supportsLibraryCodeFilter":false,"lang":"ruby","group":"","groupName":"","includeFlag":"-isystem","includePath":"","linkFlag":"-l","rpathFlag":"-Wl,-rpath,","libpathFlag":"-L","libPath":[],"ldPath":["/usr/lib","/usr/lib32","/usr/lib64"],"envVars":[],"notification":"","semver":"","libsArr":[],"tools":{},"unwiseOptions":[""],"hidden":false,"buildenvsetup":{"id":""},"supportsIntel":false,"optArg":"","supportsOptOutput":false,"disabledFilters":[],"version":"ruby 2.7.0p0 (2019-12-25 revision 647ee6f091) [x86_64-linux-gnu]","fullVersion":"ruby 2.7.0p0 (2019-12-25 revision 647ee6f091) [x86_64-linux-gnu]\n","supportsCfg":false,"supportsAstView":false},{"id":"defaultgnuas","name":"GNU AS (default)","alias":[],"options":"-g","objdumperType":"default","intelAsm":"","instructionSet":"amd64","needsMulti":true,"supportsDemangle":false,"supportsBinary":true,"interpreted":false,"supportsExecute":false,"executionWrapper":"","supportsLibraryCodeFilter":false,"lang":"assembly","group":"gnuas","groupName":"","includeFlag":"-isystem","includePath":"","linkFlag":"-l","rpathFlag":"-Wl,-rpath,","libpathFlag":"-L","libPath":[],"ldPath":["/usr/lib","/usr/lib32","/usr/lib64"],"envVars":[],"notification":"","semver":"","libsArr":[],"tools":{},"unwiseOptions":[""],"hidden":false,"buildenvsetup":{"id":""},"supportsIntel":false,"optArg":"","supportsOptOutput":false,"disabledFilters":[],"version":"GNU assembler (GNU Binutils for Ubuntu) 2.34","fullVersion":"GNU assembler (GNU Binutils for Ubuntu) 2.34\nCopyright (C) 2020 Free Software Foundation, Inc.\nThis program is free software; you may redistribute it under the terms of\nthe GNU General Public License version 3 or later.\nThis program has absolutely no warranty.\nThis assembler was configured for a target of `x86_64-linux-gnu'.\n","supportsCfg":false,"supportsAstView":false},{"id":"python35","name":"Python 3.5","alias":[],"options":"","objdumperType":"default","intelAsm":"","instructionSet":"amd64","needsMulti":false,"supportsDemangle":false,"supportsBinary":false,"interpreted":true,"supportsExecute":true,"executionWrapper":"","supportsLibraryCodeFilter":false,"lang":"python","group":"python3","groupName":"","includeFlag":"-isystem","includePath":"","linkFlag":"-l","rpathFlag":"-Wl,-rpath,","libpathFlag":"-L","libPath":[],"ldPath":["../lib","../lib32","../lib64"],"envVars":[],"notification":"","semver":"3.5","libsArr":[],"tools":{},"unwiseOptions":[""],"hidden":false,"buildenvsetup":{"id":""},"supportsIntel":false,"optArg":"","supportsOptOutput":false,"disabledFilters":[],"$order":0},{"id":"python36","name":"Python 3.6","alias":[],"options":"","objdumperType":"default","intelAsm":"","instructionSet":"amd64","needsMulti":false,"supportsDemangle":false,"supportsBinary":false,"interpreted":true,"supportsExecute":true,"executionWrapper":"","supportsLibraryCodeFilter":false,"lang":"python","group":"python3","groupName":"","includeFlag":"-isystem","includePath":"","linkFlag":"-l","rpathFlag":"-Wl,-rpath,","libpathFlag":"-L","libPath":[],"ldPath":["../lib","../lib32","../lib64"],"envVars":[],"notification":"","semver":"3.6","libsArr":[],"tools":{},"unwiseOptions":[""],"hidden":false,"buildenvsetup":{"id":""},"supportsIntel":false,"optArg":"","supportsOptOutput":false,"disabledFilters":[],"$order":-1},{"id":"python37","name":"Python 3.7","alias":[],"options":"","objdumperType":"default","intelAsm":"","instructionSet":"amd64","needsMulti":false,"supportsDemangle":false,"supportsBinary":false,"interpreted":true,"supportsExecute":true,"executionWrapper":"","supportsLibraryCodeFilter":false,"lang":"python","group":"python3","groupName":"","includeFlag":"-isystem","includePath":"","linkFlag":"-l","rpathFlag":"-Wl,-rpath,","libpathFlag":"-L","libPath":[],"ldPath":["../lib","../lib32","../lib64"],"envVars":[],"notification":"","semver":"3.7","libsArr":[],"tools":{},"unwiseOptions":[""],"hidden":false,"buildenvsetup":{"id":""},"supportsIntel":false,"optArg":"","supportsOptOutput":false,"disabledFilters":[],"$order":-2},{"id":"python38","name":"Python 3.8","alias":[],"options":"","objdumperType":"default","intelAsm":"","instructionSet":"amd64","needsMulti":false,"supportsDemangle":false,"supportsBinary":false,"interpreted":true,"supportsExecute":true,"executionWrapper":"","supportsLibraryCodeFilter":false,"lang":"python","group":"python3","groupName":"","includeFlag":"-isystem","includePath":"","linkFlag":"-l","rpathFlag":"-Wl,-rpath,","libpathFlag":"-L","libPath":[],"ldPath":["../lib","../lib32","../lib64"],"envVars":[],"notification":"","semver":"3.8","libsArr":[],"tools":{},"unwiseOptions":[""],"hidden":false,"buildenvsetup":{"id":""},"supportsIntel":false,"optArg":"","supportsOptOutput":false,"disabledFilters":[],"$order":-3},{"id":"circledefault","name":"circle default","alias":[],"options":"","objdumperType":"default","intelAsm":"--intel","instructionSet":"amd64","needsMulti":false,"supportsDemangle":true,"supportsBinary":true,"interpreted":false,"supportsExecute":true,"executionWrapper":"","supportsLibraryCodeFilter":true,"lang":"circle","group":"circle","groupName":"","includeFlag":"-isystem","includePath":"","linkFlag":"-l","rpathFlag":"-Wl,-rpath,","libpathFlag":"-L","libPath":[],"ldPath":["../lib","../lib32","../lib64"],"envVars":[],"notification":"","semver":"","libsArr":[],"tools":{"strings":{"tool":{"id":"strings","name":"strings","type":"postcompilation","exe":"/usr/bin/strings","exclude":[],"options":[],"stdinHint":"disabled","compilerLanguage":"circle"},"env":{},"addOptionsToToolArgs":true},"ldd":{"tool":{"id":"ldd","name":"ldd","type":"postcompilation","exe":"/usr/bin/ldd","exclude":[],"options":[],"stdinHint":"disabled","compilerLanguage":"circle"},"env":{},"addOptionsToToolArgs":true}},"unwiseOptions":[""],"hidden":false,"buildenvsetup":{"id":""},"supportsIntel":true,"optArg":"","supportsOptOutput":false,"disabledFilters":[]},{"id":"gdefault","name":"g++ default","alias":[],"options":"-fdiagnostics-color=always","objdumperType":"default","intelAsm":"-masm=intel","instructionSet":"amd64","needsMulti":false,"supportsDemangle":true,"supportsBinary":true,"interpreted":false,"supportsExecute":true,"executionWrapper":"","supportsLibraryCodeFilter":true,"lang":"c++","group":"gcc","groupName":"","includeFlag":"-isystem","includePath":"","linkFlag":"-l","rpathFlag":"-Wl,-rpath,","libpathFlag":"-L","libPath":[],"ldPath":["/usr/lib","/usr/lib32","/usr/lib64"],"envVars":[],"notification":"","semver":"","libsArr":[],"tools":{"strings":{"tool":{"id":"strings","name":"strings","type":"postcompilation","exe":"/usr/bin/strings","exclude":["djggp"],"options":[],"stdinHint":"disabled","compilerLanguage":"c++"},"env":{},"addOptionsToToolArgs":true},"ldd":{"tool":{"id":"ldd","name":"ldd","type":"postcompilation","exe":"/usr/bin/ldd","exclude":["djggp"],"options":[],"stdinHint":"disabled","compilerLanguage":"c++"},"env":{},"addOptionsToToolArgs":true}},"unwiseOptions":[""],"hidden":false,"buildenvsetup":{"id":""},"supportsIntel":true,"optArg":"","supportsOptOutput":false,"disabledFilters":[],"version":"g++ (Ubuntu 9.4.0-1ubuntu1~20.04) 9.4.0","fullVersion":"g++ (Ubuntu 9.4.0-1ubuntu1~20.04) 9.4.0\nCopyright (C) 2019 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n","supportsCfg":true,"supportsAstView":false,"supportsGccDump":true,"removeEmptyGccDump":true},{"id":"cgdefault","name":"gcc default","alias":[],"options":"-fdiagnostics-color=always","objdumperType":"default","intelAsm":"-masm=intel","instructionSet":"amd64","needsMulti":true,"supportsDemangle":true,"supportsBinary":true,"interpreted":false,"supportsExecute":true,"executionWrapper":"","supportsLibraryCodeFilter":true,"lang":"c","group":"gcc","groupName":"","includeFlag":"-isystem","includePath":"","linkFlag":"-l","rpathFlag":"-Wl,-rpath,","libpathFlag":"-L","libPath":[],"ldPath":["/usr/lib","/usr/lib32","/usr/lib64"],"envVars":[],"notification":"","semver":"","libsArr":[],"tools":{},"unwiseOptions":[""],"hidden":false,"buildenvsetup":{"id":""},"supportsIntel":true,"optArg":"","supportsOptOutput":false,"disabledFilters":[],"version":"gcc (Ubuntu 9.4.0-1ubuntu1~20.04) 9.4.0","fullVersion":"gcc (Ubuntu 9.4.0-1ubuntu1~20.04) 9.4.0\nCopyright (C) 2019 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n","supportsCfg":true,"supportsAstView":false,"supportsGccDump":true,"removeEmptyGccDump":true},{"id":"ocamllocal","name":"ocamllocal","alias":[],"options":"","objdumperType":"default","intelAsm":"","instructionSet":"amd64","needsMulti":true,"supportsDemangle":false,"supportsBinary":true,"interpreted":false,"supportsExecute":true,"executionWrapper":"","supportsLibraryCodeFilter":false,"lang":"ocaml","group":"ocamlopt","groupName":"","includeFlag":"-isystem","includePath":"","linkFlag":"-l","rpathFlag":"-Wl,-rpath,","libpathFlag":"-L","libPath":[],"ldPath":["../lib","../lib32","../lib64"],"envVars":[],"notification":"","semver":"","libsArr":[],"tools":{},"unwiseOptions":[""],"hidden":false,"buildenvsetup":{"id":""},"supportsIntel":false,"optArg":"","supportsOptOutput":false,"disabledFilters":[]}],"libs":{},"tools":{"c++":{"strings":{"tool":{"id":"strings","name":"strings","type":"postcompilation","exe":"/usr/bin/strings","exclude":["djggp"],"options":[],"stdinHint":"disabled","compilerLanguage":"c++"},"env":{},"addOptionsToToolArgs":true},"ldd":{"tool":{"id":"ldd","name":"ldd","type":"postcompilation","exe":"/usr/bin/ldd","exclude":["djggp"],"options":[],"stdinHint":"disabled","compilerLanguage":"c++"},"env":{},"addOptionsToToolArgs":true}},"circle":{"strings":{"tool":{"id":"strings","name":"strings","type":"postcompilation","exe":"/usr/bin/strings","exclude":[],"options":[],"stdinHint":"disabled","compilerLanguage":"circle"},"env":{},"addOptionsToToolArgs":true},"ldd":{"tool":{"id":"ldd","name":"ldd","type":"postcompilation","exe":"/usr/bin/ldd","exclude":[],"options":[],"stdinHint":"disabled","compilerLanguage":"circle"},"env":{},"addOptionsToToolArgs":true}}},"defaultLibs":{"c++":"","llvm":"","cppx":"","cppx_gold":"","cppx_blue":"","c":"","openclc":"","cpp_for_opencl":"","rust":"","d":"","go":"","ispc":"","haskell":"","java":"","kotlin":"","scala":"","ocaml":"","python":"","swift":"","pascal":"","fortran":"","assembly":"","analysis":"","cuda":"","zig":"","clean":"","ada":"","nim":"","crystal":"","circle":"","ruby":"","cmake":""},"defaultCompiler":{"c++":"gdefault","llvm":"irclang","cppx":"","cppx_gold":"golddefault","cppx_blue":"","c":"gdefault","openclc":"openclcclangdefault","cpp_for_opencl":"cppforopenclclangdefault","rust":"","d":"","go":"","ispc":"","haskell":"","java":"javacdefault","kotlin":"kotlincdefault","scala":"scalacdefault","ocaml":"ocamlsystem","python":"","swift":"","pascal":"/usr/bin/fpc","fortran":"gfortran","assembly":"","analysis":"","cuda":"nvcc91","zig":"","clean":"","ada":"gnat","nim":"","crystal":"","circle":"circledefault","ruby":"","cmake":""},"compileOptions":{"c++":"","llvm":"","cppx":"","cppx_gold":"","cppx_blue":"","c":"","openclc":"","cpp_for_opencl":"","rust":"","d":"","go":"","ispc":"","haskell":"","java":"","kotlin":"","scala":"","ocaml":"","python":"","swift":"","pascal":"","fortran":"","assembly":"","analysis":"","cuda":"","zig":"","clean":"","ada":"","nim":"","crystal":"","circle":"","ruby":"","cmake":""},"supportsBinary":{"c++":true,"llvm":true,"cppx":true,"cppx_gold":true,"cppx_blue":true,"c":true,"openclc":false,"cpp_for_opencl":false,"rust":true,"d":true,"go":true,"ispc":false,"haskell":false,"java":false,"kotlin":false,"scala":false,"ocaml":true,"python":false,"swift":true,"pascal":true,"fortran":true,"assembly":true,"analysis":false,"cuda":true,"zig":true,"clean":false,"ada":false,"nim":true,"crystal":true,"circle":true,"ruby":false,"cmake":true},"supportsExecute":true,"supportsLibraryCodeFilter":true,"languages":{"c++":{"name":"C++","monaco":"cppp","extensions":[".cpp",".cxx",".h",".hpp",".hxx",".c",".cc",".ixx"],"alias":["gcc","cpp"],"previewFilter":{},"formatter":"clangformat","id":"c++","supportsExecute":true,"example":"// Type your code here, or load an example.\nint square(int num) {\n    return num * num;\n}"},"llvm":{"name":"LLVM IR","monaco":"llvm-ir","extensions":[".ll"],"alias":[],"id":"llvm","supportsExecute":false,"example":"define i32 @square(i32) local_unnamed_addr #0 {\n    %2 = mul nsw i32 %0, %0\n    ret i32 %2\n}\n"},"cppx":{"name":"Cppx","monaco":"cppp","extensions":[".cpp",".cxx",".h",".hpp",".hxx",".c"],"alias":[],"previewFilter":{},"id":"cppx","supportsExecute":false,"example":"// Pick an appropriate example from the Load/Save\n// icon above.\n"},"cppx_gold":{"name":"Cppx-Gold","monaco":"cppx-gold","extensions":[".usyntax",".cpp",".cxx",".h",".hpp",".hxx",".c"],"alias":[],"id":"cppx_gold","supportsExecute":false,"example":"# Type your code here, or load an example.\nsquare(num : int) : int!\n  return num * num\n\nmain() : int!\n  return 0"},"cppx_blue":{"name":"Cppx-Blue","monaco":"cppx-blue","extensions":[".blue",".cpp",".cxx",".h",".hpp",".hxx",".c"],"alias":[],"id":"cppx_blue","supportsExecute":false,"example":"// Type your code here, or load an example\nsquare: (x: int) -> int = {\n    return x * x;\n}\n"},"c":{"name":"C","monaco":"nc","extensions":[".c",".h"],"alias":[],"previewFilter":{},"id":"c","supportsExecute":true,"example":"// Type your code here, or load an example.\nint square(int num) {\n    return num * num;\n}"},"openclc":{"name":"OpenCL C","monaco":"openclc","extensions":[".cl",".ocl"],"alias":[],"id":"openclc","supportsExecute":false,"example":"kernel void do_add_sub(global short4 *add_out, global short4 *sub_out,\n                       global short4 *x, global short4 *y)\n{\n    size_t g = get_global_id(0);\n    add_out[g] = x[g] + y[g];\n    sub_out[g] = x[g] - y[g];\n}"},"cpp_for_opencl":{"name":"C++ for OpenCL","monaco":"cpp-for-opencl","extensions":[".clcpp",".cl",".ocl"],"alias":[],"id":"cpp_for_opencl","supportsExecute":false,"example":"template<typename T>\nT add(T a, T b) {\n    return a + b;\n}\nkernel void k(global int* in1, global int* in2, global int* out) {\n    auto index = get_global_id(0);\n    out[index] = add(in1[index], in2[index]);\n}"},"rust":{"name":"Rust","monaco":"rust","extensions":[".rs"],"alias":[],"formatter":"rustfmt","id":"rust","supportsExecute":false,"example":"// Type your code here, or load an example.\npub fn square(num: i32) -> i32 {\n    num * num\n}\n\n// If you use `main()`, declare it as `pub` to see it in the output:\n// pub fn main() { ... }\n"},"d":{"name":"D","monaco":"d","extensions":[".d"],"alias":[],"id":"d","supportsExecute":false,"example":"// Type your code here, or load an example.\nint square(int num) {\n    return num * num;\n}\n"},"go":{"name":"Go","monaco":"go","extensions":[".go"],"alias":[],"id":"go","supportsExecute":false,"example":"// Type your code here, or load an example.\n// Your function name should start with a capital letter.\npackage main\n\nfunc Square(x int) int {\n    return x * x\n}\n\nfunc main() {}\n"},"ispc":{"name":"ispc","monaco":"ispc","extensions":[".ispc"],"alias":[],"id":"ispc","supportsExecute":false,"example":"// Type your code here, or load an example.\nuniform int square(uniform int num) {\n    return num * num;\n}\n"},"haskell":{"name":"Haskell","monaco":"haskell","extensions":[".hs",".haskell"],"alias":[],"id":"haskell","supportsExecute":false,"example":"module Example where\n\nsumOverArray :: [Int] -> Int\nsumOverArray (x:xs) = x + sumOverArray xs\nsumOverArray [] =  0\n"},"java":{"name":"Java","monaco":"java","extensions":[".java"],"alias":[],"id":"java","supportsExecute":false,"example":"// Type your code here, or load an example.\nclass Square {\n    static int square(int num) {\n        return num * num;\n    }\n}"},"kotlin":{"name":"Kotlin","monaco":"kotlin","extensions":[".kt"],"alias":[],"id":"kotlin","supportsExecute":false,"example":"// Type your code here, or load an example.\nfun square(num: Int): Int = num * num\n"},"scala":{"name":"Scala","monaco":"scala","extensions":[".scala"],"alias":[],"id":"scala","supportsExecute":false,"example":"// Type your code here, or load an example.\nobject Square {\n    def square(num: Int): Int =\n        num * num\n}\n"},"ocaml":{"name":"OCaml","monaco":"ocaml","extensions":[".ml",".mli"],"alias":[],"id":"ocaml","supportsExecute":true,"example":"let square x = x * x\n"},"python":{"name":"Python","monaco":"python","extensions":[".py"],"alias":[],"id":"python","supportsExecute":true,"example":"def main():\n    pass"},"swift":{"name":"Swift","monaco":"swift","extensions":[".swift"],"alias":[],"id":"swift","supportsExecute":false,"example":"// Type your code here, or load an example.\nfunc square(n: Int) -> Int {\n    return n * n\n}"},"pascal":{"name":"Pascal","monaco":"pascal","extensions":[".pas",".dpr"],"alias":[],"id":"pascal","supportsExecute":false,"example":"unit output;\n\ninterface\n\nfunction Square(const num: Integer): Integer;\n\nimplementation\n\n// Type your code here, or load an example.\n\nfunction Square(const num: Integer): Integer;\nbegin\n    Square := num * num;\nend;\n\nend.\n"},"fortran":{"id":"fortran","name":"Fortran","monaco":"fortran","extensions":[".f90",".F90",".f95",".F95",".f"],"alias":[],"supportsExecute":false,"example":"! Type your code here, or load an example.\nreal function square(x)\n    implicit none\n    real, intent(in) :: x\n    square = x * x\n    return\nend function square\n"},"assembly":{"name":"Assembly","monaco":"asm","extensions":[".asm"],"alias":["asm"],"id":"assembly","supportsExecute":false,"example":"infiniteLoop:\n    jmp main\nmain:\n    jmp infiniteLoop\n"},"analysis":{"name":"Analysis","monaco":"asm","extensions":[".asm"],"alias":["tool","tools"],"id":"analysis","supportsExecute":false,"example":"code_snippet:\n    vpslldq xmm1, xmm0, 3\n    vaddps xmm0, xmm0, xmm1\n    vmulps xmm1, xmm0, xmm0\n    dec rcx\n    jne code_snippet\n"},"cuda":{"name":"CUDA C++","monaco":"cuda","extensions":[".cu"],"alias":["nvcc"],"monacoDisassembly":"ptx","id":"cuda","supportsExecute":false,"example":"// Type your code here, or load an example.\n__global__ void square(int *array, int n) {\n    int tid = blockIdx.x;\n    if (tid < n)\n        array[tid] = array[tid] * array[tid];\n}\n"},"zig":{"name":"Zig","monaco":"zig","extensions":[".zig"],"alias":[],"id":"zig","supportsExecute":false,"example":"// Type your code here, or load an example.\nexport fn square(num: i32) i32 {\n    return num * num;\n}\n"},"clean":{"name":"Clean","monaco":"clean","extensions":[".icl"],"alias":[],"id":"clean","supportsExecute":false,"example":"module example\n\nimport StdInt\n\nsquare :: Int -> Int\nsquare n = n * n\n\nStart :: Int\nStart = square 3\n"},"ada":{"name":"Ada","monaco":"ada","extensions":[".adb",".ads"],"alias":[],"id":"ada","supportsExecute":false,"example":"-- This pragma will remove the warning produced by the default\n-- CE filename and the procedure name differing,\n-- see : https://gcc.gnu.org/onlinedocs/gcc-8.2.0/gnat_rm/Pragma-Source_005fFile_005fName.html#Pragma-Source_005fFile_005fName\npragma Source_File_Name (Square, Body_File_Name => \"example.adb\");\n\n-- Type your code here, or load an example.\nfunction Square(num : Integer) return Integer is\nbegin\n    return num**2;\nend Square;\n\n-- Ada 2012 also provides Expression Functions\n-- (http://www.ada-auth.org/standards/12rm/html/RM-6-8.html)\n-- as a short hand for functions whose body consists of a\n-- single return statement. However they cannot be used as a\n-- complication unit.\n-- function Square(num : Integer) return Integer is (num**2);\n"},"nim":{"name":"Nim","monaco":"nim","extensions":[".nim"],"alias":[],"id":"nim","supportsExecute":false,"example":"# Type your code here, or load an example.\nproc square(num: int): int {.exportc.} =\n  num * num\n"},"crystal":{"name":"Crystal","monaco":"crystal","extensions":[".cr"],"alias":[],"id":"crystal","supportsExecute":false,"example":"# Type your code here, or load an example.\n\n# compile with --prelude=empty\nfun square(num : Int32) : Int32\n  num &* num\nend"},"circle":{"name":"C++ (Circle)","monaco":"cppcircle","extensions":[".cpp",".cxx",".h",".hpp",".hxx",".c"],"alias":[],"previewFilter":{},"id":"circle","supportsExecute":true,"example":"#include <cstdio>\n\nint main(int argc, char** argv) {\n  printf(\"Hello world\\n\");\n  @meta printf(\"Hello circle\\n\");\n  return 0;\n}\n"},"ruby":{"name":"Ruby","monaco":"ruby","extensions":[".rb"],"alias":[],"monacoDisassembly":"asmruby","id":"ruby","supportsExecute":true,"example":"# Type your code here, or load an example.\ndef square(num)\n  num * num\nend"},"cmake":{"name":"CMake","monaco":"cmake","extensions":[".txt"],"alias":[],"id":"cmake","supportsExecute":false,"example":"project(default)\n\nadd_compile_options(-Werror -Wall -Wextra -g)\n\nadd_executable(output.s example.cpp)\n"}},"sources":[{"name":"Browser","urlpart":"browser"},{"name":"Examples","urlpart":"builtin"}],"sentryDsn":"","sentryEnvironment":"dev","release":"6f18695dc0efc0baad6567822e199eefdd47f83e","gitReleaseCommit":"6f18695dc0efc0baad6567822e199eefdd47f83e","cookieDomainRe":"","cvCompilerCountMax":10,"defaultFontScale":14,"doCache":true,"thirdPartyIntegrationEnabled":true,"statusTrackingEnabled":true,"policies":{"cookies":{"enabled":false,"hash":null,"key":"cookie_status"},"privacy":{"enabled":false,"hash":null,"key":"privacy_status"}},"motdUrl":"","pageloadUrl":""};